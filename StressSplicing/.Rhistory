setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
### separting the Splicing data by experiment and calbration ###
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "2018_6_1_plate.csv")
### separting the Splicing data by experiment and calbration ###
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "2018_6_1_plate.csv")
### separting the Splicing data by experiment and calbration ###
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "2018_6_1_plate.csv", header = TRUE)
names(dat)
### separting the Splicing data by experiment and calbration ###
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "2018_6_1_plate.csv")
dat = t(dat)
names(dat)
### separting the Splicing data by experiment and calbration ###
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat =t(read.csv(file = "2018_6_1_plate.csv",header = TRUE))
names(dat)
colnames(dat, do.NULL = TRUE, prefix = "col")
### separting the Splicing data by experiment and calbration ###
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat =read.csv(file = "2018_6_1_plate.csv",header = TRUE)
colnames(dat, do.NULL = TRUE, prefix = "col")
rownames(dat, do.NULL = TRUE, prefix = "col")
View(dat)
sampleID = dat[3,2:]
length(dat)
sampleID = dat[3,2:length(dat)]
head(sampleID)
### separting the Splicing data by experiment and calbration ###
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat =read.csv(file = "2018_6_1_plate.csv")
starting_quantity= dat[4,2:length(dat)]
head(starting_quantity)
dat[4,2]
View(dat)
### separting the Splicing data by experiment and calbration ###
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat =read.csv(file = "2018_6_1_plate.csv", header = FALSE)
starting_quantity= dat[4,2:length(dat)]
head(starting_quantity)
starting_quantity[4,2]
?ifelse()
ifelse(starting_quantity = NaN, Experiment, Calibration )
ifelse(starting_quantity = "NaN", Experiment, Calibration )
sampleID= dat[3,2:length(dat)]
head(sampleID)
library("stringr")
ifelse(substr(sampleID 1,1) = "g", Calibration, Experiment)
ifelse(substr(sampleID, 1,1) = "g", Calibration, Experiment)
ifelse(substr(sampleID, 1,1) == "g", Calibration, Experiment)
ifelse(substr(sampleID, 1,1) == "g", "Calibration", "Experiment")
substr(sampleID, 1,1)
names(sampleID)
head(sampleID)
starting_quantity = dat[4,2:length(dat)]
ifelse(starting_quantity == "NaN", "Experiment", "Calibration")
data_type = ifelse(starting_quantity == "NaN", "Experiment", "Calibration")
dat = cbind(dat, data_type)
dat = rbind(dat, data_type)
dat = cbind(dat, data_type)
length(dat)
length(data_type)
#Add in SNP info from Marker data CSV, beginning with column six
snp = read.csv(file = "IBM94markerset08seq.csv")
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
library(stringr)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat[-(907:938),-(4:5)]
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
#Add in SNP info from Marker data CSV, beginning with column six
snp = read.csv(file = "IBM94markerset08seq.csv")
snp = snp[,-(1:5)]
#Create zero matrix to which data will input
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
#Add matched Mo### values to data frame
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
#Running into errors beginning with colnames(dat2)#
colnames = colnames(dat2)
colnames
### Combining Genomes and Mo###
library(stringr)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat[-(907:938),-(4:5)]
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
snp = read.csv(file = "IBM94markerset08seq.csv")
snp = snp[,-(1:5)]
#Create zero matrix to which data will input
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
#From "Genotype" values, match Plant Height data and Marker data by detecting last three digits of Mo###'s
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
#Add matched Mo### values to data frame
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
#Running into errors beginning with colnames(dat2)#
colnames = colnames(dat2)
View(dat2)
#Add matched Mo### values to data frame
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
View(dat2)
#From "Genotype" values, match Plant Height data and Marker data by detecting last three digits of Mo###'s
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
View(dat2)
#Add matched Mo### values to data frame
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
### Combining Genomes and Mo###
library(stringr)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat[-(907:938),-(4:5)]
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
View(dat)
snp = read.csv(file = "IBM94markerset08seq.csv")
snp = snp[,-(1:5)]
View(snp)
#Add in SNP info from Marker data CSV, beginning with column six
snp = read.csv(file = "IBM94markerset08seq.csv", header = TRUE)
snp = snp[,-(1:5)]
View(dat)
View(snp)
#Create zero matrix to which data will input
relevant = data.frame(matrix(rep(0,length(dat$Genotype)*dim(snp)[1]), ncol = dim(snp)[1]))
#From "Genotype" values, match Plant Height data and Marker data by detecting last three digits of Mo###'s
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
View(relevant)
?unlist()
#Add matched Mo### values to data frame
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
#Running into errors beginning with colnames(dat2)#
colnames = colnames(dat2)
dim(dat2);dim(snp)
View(dat2)
### Combining Genomes and Mo###
library(stringr)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat[-(907:938),-(4:5)]
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
#Add in SNP info from Marker data CSV, beginning with column six
snp = read.csv(file = "IBM94markerset08seq.csv", header = TRUE)
snp = snp[,-(1:5)]
#From "Genotype" values, match Plant Height data and Marker data by detecting last three digits of Mo###'s
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
View(dat2)
#Add matched Mo### values to data frame
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
View(dat2)
#Running into errors beginning with colnames(dat2)#
colnames = colnames(dat2)
library(beepr)
beep()
beep()
dim(dat2);dim(snp)
View(dat2)
#####Adding back in the Trait info#####
dat2 = cbind(dat$Height,dat[,1:3],dat2)
colnames(dat2) = c(colnames(dat[1:3]),"Height",as.character(snp$markername))
dat2[1:10,1:10]
aux = matrix(snp$incre_new, nrow= 1)
aux = rbind(aux,snp$Chromosome)
other = as.data.frame(matrix(rep(0,8), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",3239)
colnames(dat2) = rep("",3239)
dat3 = rbind(aux,dat2)
colnames(dat3) = c("Height", colnames(dat2[1:3]),as.character(snp$markername))
dat3[1:10,1:10]
str_sub(dat$Genotype,-3,-1)
head(str_sub(dat$Genotype,-3,-1))
head(str_sub(colnames(snp),-3,-1))
#testing dat 2
Samp = dat[1:10,]
SampDat = sapply(str_sub(Samp$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
View(SampDat)
SampDat = as.data.frame(matrix(unlist(SampDat), nrow = dim(Samp)[1], byrow = TRUE))
View(SampDat)
library(stringr)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat[-(907:938),-(4:5)]
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
#Add in SNP info from Marker data CSV, beginning with column six
snp = read.csv(file = "IBM94markerset08seq.csv", header = TRUE)
snp = snp[,-(1:5)]
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
#Add matched Mo### values to data frame
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
View(dat2)
Samp = dat[1:10,]
SampDat = sapply(str_sub(Samp$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
SampDat = as.data.frame(matrix(unlist(SampDat), nrow = dim(Samp)[1], byrow = TRUE))
View(SampDat)
View(dat2)
View(dat)
View(snp)
unique(head(dat$Genotype))
unique(head(Samp$Genotype))
View(Samp)
Samp = dat[1:100,]
SampDat = sapply(str_sub(Samp$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
SampDat = as.data.frame(matrix(unlist(SampDat), nrow = dim(Samp)[1], byrow = TRUE))
### Combining Genomes and Mo###
library(stringr)
#testing dat 2
Samp = dat[1:100,]
SampDat = sapply(str_sub(Samp$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
SampDat = as.data.frame(matrix(unlist(SampDat), nrow = dim(Samp)[1], byrow = TRUE))
View(SampDat)
?filter()
#testing dat 2
Samp = dat[1:34,]
SampDat = sapply(str_sub(Samp$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
SampDat = as.data.frame(matrix(unlist(SampDat), nrow = dim(Samp)[1], byrow = TRUE))
View(SampDat)
#testing dat 2
Samp = dat[1:33,]
SampDat = sapply(str_sub(Samp$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
SampDat = as.data.frame(matrix(unlist(SampDat), nrow = dim(Samp)[1], byrow = TRUE))
View(SampDat)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat[-(907:938),-(4:5)]
dat = filter(str_detect(dat$Height..in.., "N") == FALSE)
library(tidyverse)
dat = dat %>% filter(str_detect(dat$Height..in.., "N") == FALSE)
dat = dat %>% filter(str_detect(dat$Height..in.., "N") == FALSE)
unique(dat$Height..in..)
dat[40:50]
dat[40:50,]
dat[30:40,]
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
#Add matched Mo### values to data frame
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
View(dat2)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat[-(907:938),1:4]
#Take out unneeded IBMB###, NA, B73 loci
dat = dat[-(907:938),(1:4)]
#Take out unneeded IBMB###, NA, B73 loci
dat = dat[-(907:938),-5]
dat = dat %>% filter(str_detect(dat$Height..in.., "N") == FALSE)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat[-(907:938),-5]
dat = dat %>% filter(str_detect(dat$Height..in.., "N") == FALSE)
View(dat)
Samp = dat[1:33,]
SampDat = sapply(str_sub(Samp$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
SampDat = as.data.frame(matrix(unlist(SampDat), nrow = dim(Samp)[1], byrow = TRUE))
View(SampDat)
dat2 = sapply(str_sub(dat$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(vect)
})
#Add matched Mo### values to data frame
dat2 = as.data.frame(matrix(unlist(dat2), nrow = dim(dat)[1], byrow = TRUE))
View(dat2)
#testing dat 2
Samp = dat[1:33,]
SampDat = sapply(str_sub(Samp$Genotype,-3,-1), function(x){
column = which(str_sub(colnames(snp),-3,-1) == x)
vect = data.frame(as.character(snp[,column]))
return(cbind(vect, Samp$Genotype))
})
SampDat = cbind(Samp$Genotype, SampDat)
View(SampDat)
