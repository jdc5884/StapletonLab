#############################################
library(data.table)
#function takes the last n characters of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
#need = c(1,5,7,8,9,10,16) #column numbers of needed variables
#dat.num = dat.num[,need]
colnames(snpMatch) = "GenotypeNum"
#datnames =names(dat.num)
colnames(dat.num)[16] = "GenotypeNum"
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1] #omit GenotypeNum
dat2[1:20, 1:20]
#write.csv(dat2, "SamplingPlan_dat2.csv")
########################################
######### Including plate data #########
########################################
colnames(dat2)[4] = "sampleID"
# 2018_11 plate data #
### the file in plate will come from the qPCR output including ratios ###
plate_11 = read.csv(file = "../2018_11/2018_11_withStress.csv", header = TRUE)
colnames(plate_11)[2] = "sampleID"
full_11 = merge(plate_11, dat2, by = "sampleID")
names(plate_11)
head(names(full_11), 20)
addmarker <- function(full){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
colnames(dat3) = c(names(full)[1:zeros], as.character(snpFull$markername))
return(dat3)
}
vqtl_11 = addmarker(full_11)
names(vqtl_11)
head(names(vqtl_11))
full
addmarker <- function(full){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
colnames(dat3) = c(names(full)[1:zeros], as.character(snpFull$markername))
return(dat3)
return(names(full)[1:zeros])
}
vqtl_11 = addmarker(full_11)
dim(vqtl_11)
addmarker <- function(full){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
colnames(dat3) = c(names(full)[1:zeros], as.character(snpFull$markername))
#return(dat3)
return(names(full)[1:zeros])
}
vqtl_11 = addmarker(full_11)
vqtl_11
length(vqtl_11)
addmarker <- function(full){
return(names(full)[1:zeros])
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
colnames(dat3) = c(names(full)[1:zeros], as.character(snpFull$markername))
#return(dat3)
}
vqtl_11 = addmarker(full_11)
addmarker <- function(full){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
return(names(full)[1:zeros])
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
colnames(dat3) = c(names(full)[1:zeros], as.character(snpFull$markername))
#return(dat3)
}
vqtl_11 = addmarker(full_11)
vqtl_11
addmarker <- function(full){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
return(names(full)[1:zeros])
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
colnames(dat3) = c(names(full)[1:zeros], as.character(snpFull$markername))
#return(dat3)
}
vqtl_11 = addmarker(full_11)
print(vqtl_11)
addmarker <- function(full){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
#colnames(dat3) = c(names(full)[1:zeros], as.character(snpFull$markername))
colnames(dat3)[1:zeros] = c(names(full)[1:zeros])
#return(dat3)
}
vqtl_11 = addmarker(full_11)
print(head(names(vqtl_11), 20)
)
print(head(names(vqtl_11), 20))
vqtl_11[1:5, 1:20]
dim(vqtl_11)
head(vqtl_11)
return(dat3)
addmarker <- function(full){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
#colnames(dat3) = c(names(full)[1:zeros], as.character(snpFull$markername))
colnames(dat3)[1:zeros] = c(names(full)[1:zeros])
return(dat3)
}
vqtl_11 = addmarker(full_11)
print(head(names(vqtl_11), 20))
addmarker <- function(full){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
return(names(full)[1:zeros])
dat3 = rbind(aux,full)
colnames(dat3) = c(names(full)[1:zeros], as.character(snpFull$markername))
#return(dat3)
}
vqtl_11 = addmarker(full_11)
print(head(names(vqtl_11), 20))
print(vqtl_11)
addmarker <- function(full, plate){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
fillnames = names(full)[1:zeros]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
colnames(dat3) = c(fillnames, as.character(snpFull$markername))
#return(dat3)
}
vqtl_11 = addmarker(full_11)
print(head(names(vqtl_11), 20))
addmarker <- function(full, plate){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
fillnames = names(full)[1:zeros]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
colnames(dat3) = c(fillnames, as.character(snpFull$markername))
return(dat3)
}
vqtl_11 = addmarker(full_11)
print(head(names(vqtl_11), 20))
write.csv(vqtl_11, file = "vqtlinput_11.csv" ,row.names = FALSE)
write.csv(vqtl_11, file = "../2018_11/vqtlinput_11.csv" ,row.names = FALSE)
### Sample plan data cleaning ###
library(stringr)
library(tidyverse)
library(dplyr)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing/SamplingPlan")
#############################################
##### formatting the Sampling Plan data #####
#############################################
dat = read.csv(file = "../2016_Clayton/Field Book (2016) - Clayton - Sampling Plan_TIDIED.csv", header = TRUE)
#filter out the recongizable MO###
dat = dat %>% filter(str_detect(dat$Genotype, "Mo") == TRUE)
#create the breedtype category
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Hybrid")
dat = cbind(BreedType, dat)
snpFull = read.csv(file = "../IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
#############################################
### matching the Mo### to their snp Values ##
#############################################
library(data.table)
#function takes the last n characters of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
#need = c(1,5,7,8,9,10,16) #column numbers of needed variables
#dat.num = dat.num[,need]
colnames(snpMatch) = "GenotypeNum"
#datnames =names(dat.num)
colnames(dat.num)[16] = "GenotypeNum"
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1] #omit GenotypeNum
dat2[1:20, 1:20]
########################################
######### Including plate data #########
########################################
colnames(dat2)[4] = "sampleID"
# 2018_11 plate data #
### the file in plate will come from the qPCR output including ratios ###
plate_11 = read.csv(file = "../2018_11/2018_11_withStress.csv", header = TRUE)
colnames(plate_11)[2] = "sampleID"
full_11 = merge(plate_11, dat2, by = "sampleID")
# 2018_6 plate data #
plate_6 = read.csv(file = , header = TRUE)
addmarker <- function(full, plate){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
fillnames = names(full)[1:zeros]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
colnames(dat3) = c(fillnames, as.character(snpFull$markername))
return(dat3)
}
vqtl_11 = addmarker(full_11)
#write.csv(vqtl_11, file = "../2018_11/vqtlinput_11.csv" ,row.names = FALSE)
vqtl_6 = addmarker(full_6)
#write.csv(vqtl_11, file = "../2018_6/vqtlinput_6.csv" ,row.names = FALSE)
vqtl_8 = addmarker(full_8)
vqtl_11[1:5, 1:25]
head(names(vqtl_11), 25
)
#unnecessary columns for vQTL input
notneed = c(1:6,9:11,13,14,16:21)
names(vqtl_11[,need]))
names(vqtl_11[,need])
names(vqtl_11[,notneed])
head(names(vqtl_11[,-notneed]), 25)
head(names(vqtl_11), 25)
### Sample plan data cleaning ###
library(stringr)
library(tidyverse)
library(dplyr)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing/SamplingPlan")
#############################################
##### formatting the Sampling Plan data #####
#############################################
dat = read.csv(file = "../2016_Clayton/Field Book (2016) - Clayton - Sampling Plan_TIDIED.csv", header = TRUE)
dat = dat %>% filter(str_detect(dat$Genotype, "Mo") == TRUE)
#create the breedtype category
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Hybrid")
dat = cbind(BreedType, dat)
snpFull = read.csv(file = "../IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
#############################################
### matching the Mo### to their snp Values ##
#############################################
library(data.table)
#function takes the last n characters of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
#need = c(1,5,7,8,9,10,16) #column numbers of needed variables
#dat.num = dat.num[,need]
colnames(snpMatch) = "GenotypeNum"
#datnames =names(dat.num)
colnames(dat.num)[16] = "GenotypeNum"
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1] #omit GenotypeNum
dat2[1:20, 1:20]
#write.csv(dat2, "SamplingPlan_dat2.csv")
colnames(dat2)[4] = "sampleID"
# 2018_11 plate data #
### the file in plate will come from the qPCR output including ratios ###
plate_11 = read.csv(file = "../2018_11/2018_11_withStress.csv", header = TRUE)
colnames(plate_11)[2] = "sampleID"
full_11 = merge(plate_11, dat2, by = "sampleID")
addmarker <- function(full, plate){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
zeros = dim(full)[2]-dim(aux)[2]
fillnames = names(full)[1:zeros]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
colnames(dat3) = c(fillnames, as.character(snpFull$markername))
return(dat3)
}
vqtl_11 = addmarker(full_11)
#unnecessary columns for vQTL input, we only need: Stress, breedtype, genotype, barcode
notneed = c(1:6,9:11,13,14,16:21)
write.csv(vqtl_11[,-notneed], file = "../2018_11/vqtlinput_11.csv" ,row.names = FALSE)
### qtl anlysis on 2018_11 plate data ###
library("qtl")
library("vqtl")
library("dplyr")
library("stringr")
#library(beepr)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
#now with the Stress_11 dataset
Stress_11 <-read.cross(file = "./2018_11/vqtlinput_11.csv")
#####small sample of snpHeight
#####Stress_11 = read.cross(file = "sampSnpHeight.csv")
Stress_11 <- drop.nullmarkers(Stress_11)
##### CORTY code #####
Stress_11$pheno$BreedType = factor(Stress_11$pheno$BreedType)
head(Stress_11$pheno$BreedType)
Stress_11 <- calc.genoprob(Stress_11)
outv <- scanonevar(cross = Stress_11,
mean.formula = stress ~ BreedType * (mean.QTL.add + mean.QTL.dom),
var.formula = ~ BreedType * (var.QTL.add + var.QTL.dom),
return.covar.effects = TRUE)
# eliminate all '(' in the ID in the stress files #
outv <- scanonevar(cross = Stress_11,
mean.formula = stress ~ BreedType * (mean.QTL.add + mean.QTL.dom),
var.formula = ~ BreedType * (var.QTL.add + var.QTL.dom),
return.covar.effects = TRUE)
#now with the Stress_11 dataset
Stress_11 <-read.cross(file = "./2018_11/vqtlinput_11.csv")
#####small sample of snpHeight
#####Stress_11 = read.cross(file = "sampSnpHeight.csv")
Stress_11 <- drop.nullmarkers(Stress_11)
##### CORTY code #####
Stress_11$pheno$BreedType = factor(Stress_11$pheno$BreedType)
Stress_11 <- calc.genoprob(Stress_11)
# eliminate all '(' in the ID in the stress files #
outv <- scanonevar(cross = Stress_11,
mean.formula = stress ~ BreedType * (mean.QTL.add + mean.QTL.dom),
var.formula = ~ BreedType * (var.QTL.add + var.QTL.dom),
return.covar.effects = TRUE)
outv$result %>% glimpse()
write.csv(outv$result, file = "InteractiveModelStress_11_Output.csv")
### Sample plan data cleaning ###
library(stringr)
library(tidyverse)
library(dplyr)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing/SamplingPlan")
dat = read.csv(file = "../2016_Clayton/Field Book (2016) - Clayton - Sampling Plan_TIDIED.csv", header = TRUE)
#filter out the recongizable MO###
dat = dat %>% filter(str_detect(dat$Genotype, "Mo") == TRUE)
#create the breedtype category
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Hybrid")
dat = cbind(BreedType, dat)
snpFull = read.csv(file = "../IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
#############################################
### matching the Mo### to their snp Values ##
#############################################
library(data.table)
#function takes the last n characters of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
#need = c(1,5,7,8,9,10,16) #column numbers of needed variables
#dat.num = dat.num[,need]
colnames(snpMatch) = "GenotypeNum"
#datnames =names(dat.num)
colnames(dat.num)[16] = "GenotypeNum"
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1] #omit GenotypeNum
dat2[1:20, 1:20]
#write.csv(dat2, "SamplingPlan_dat2.csv")
########################################
######### Including plate data #########
########################################
colnames(dat2)[4] = "sampleID"
plate_11 = read.csv(file = "../2018_11/2018_11_withStress.csv", header = TRUE)
colnames(plate_11)[2] = "sampleID"
full_11 = merge(plate_11, dat2, by = "sampleID")
addmarker <- function(full, plate){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(snpFull$Chromosome, aux)
zeros = dim(full)[2]-dim(aux)[2]
fillnames = names(full)[1:zeros]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
colnames(dat3) = c(fillnames, as.character(snpFull$markername))
return(dat3)
}
vqtl_11 = addmarker(full_11)
#unnecessary columns for vQTL input, we only need: Stress, breedtype, genotype, barcode
notneed = c(1:6,9:11,13,14,16:21)
write.csv(vqtl_11[,-notneed], file = "../2018_11/vqtlinput_11.csv" ,row.names = FALSE)
write.csv(vqtl_11[,-notneed], file = "../2018_11/vqtlinput_11.csv" ,row.names = FALSE)
library("qtl")
library("vqtl")
library("dplyr")
library("stringr")
#library(beepr)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
#now with the Stress_11 dataset
Stress_11 <-read.cross(file = "./2018_11/vqtlinput_11.csv")
#####small sample of snpHeight
#####Stress_11 = read.cross(file = "sampSnpHeight.csv")
Stress_11 <- drop.nullmarkers(Stress_11)
##### CORTY code #####
Stress_11$pheno$BreedType = factor(Stress_11$pheno$BreedType)
Stress_11 <- calc.genoprob(Stress_11)
# eliminate all '(' in the ID in the stress files #
outv <- scanonevar(cross = Stress_11,
mean.formula = stress ~ BreedType * (mean.QTL.add + mean.QTL.dom),
var.formula = ~ BreedType * (var.QTL.add + var.QTL.dom),
return.covar.effects = TRUE)
outv$result %>% glimpse()
write.csv(outv$result, file = "InteractiveModelStress_11_Output.csv")
write.csv(outv$result, file = "InteractiveModelStress_11_Output.csv")
?ifelse()
library("qtl")
library("vqtl")
library("dplyr")
library("stringr")
#library(beepr)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
#now with the Stress_11 dataset
Stress_11 <-read.cross(file = "./2018_11/vqtlinput_11.csv")
#####small sample of snpHeight
#####Stress_11 = read.cross(file = "sampSnpHeight.csv")
Stress_11 <- drop.nullmarkers(Stress_11)
##### CORTY code #####
Stress_11$pheno$BreedType = factor(Stress_11$pheno$BreedType)
Stress_11$pheno$DumBreed = ifelse(Stress_11$pheno$BreedType=="Inbred", 0, 1)
head(Stress_11$pheno$DumBreed)
tail(Stress_11$pheno$DumBreed )
Stress_11$pheno$BreedType = factor(Stress_11$pheno$BreedType)
Stress_11$pheno$DumBreed = ifelse(Stress_11$pheno$BreedType=="Inbred", 0, 1)
# ggplot of Stress_11 type and height
# library(tidyverse)
# Stress_11$pheno %>%
#   ggplot(mapping = aes(x = BreedType, y = stress)) +
#   geom_jitter(width = 0.2)
Stress_11 <- calc.genoprob(Stress_11)
# eliminate all '(' in the ID in the stress files #
outv <- scanonevar(cross = Stress_11,
mean.formula = stress ~ BreedType * (mean.QTL.add + mean.QTL.dom),
var.formula = ~ BreedType * (var.QTL.add + var.QTL.dom),
return.covar.effects = TRUE)
outv$result %>% glimpse()
write.csv(outv$result, file = "InteractiveModelStress_11_Output.csv")
