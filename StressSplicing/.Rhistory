}
datSamp.num
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
datSamp.num = if (length(datSamp.num)==2) {
paste("0", datSamp.num, sep = '')
}
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
datSamp.num = for (num in datSamp.num){
paste("0", datSamp.num, sep = '')
}
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
datSamp.num = for (num in datSamp.num){
if (length(num)==2) {
paste("0", num, sep = '')
}}
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
datSamp.num = for (num in datSamp.num){
if (length(num)==2) {
paste("0", num, sep = '')
}}
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
num = for (num in datSamp.num){
if (length(num)==2) {
paste("0", num, sep = '')
}}
num
datSamp.num
length(datSamp.num[5])
length(substr(datSamp.num[5]))
substr(datSamp.num[5])
substr(datSamp.num[5], 1)
substr(datSamp.num[5], 1,3)
substr(datSamp.num[5], 1,4)
length(substr(datSamp.num[5], 1,4))
nchar(datSamp.num[5])
datSamp[5]
datSamp
datSamp[5,2]
test = datSamp[5,2]
?strip()
str_remove(test, " ")
datSamp.num = sapply(str_remove(x, " "))
datSamp.num = sapply(str_remove(datSamp.num, " "))
?sapply()
datSamp.num = apply(str_remove(datSamp.num, " "))
datSamp.num = apply(datSamp.num, str_remove(datSamp.num, " "))
datSamp = apply(datSamp, str_remove(Genotype, " "))
datSamp.num = for (num in datSamp.num){
str_remove(num, " "))}
datSamp.num = for (num in datSamp.num){
str_remove(num, " ")}
datSamp.num
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
datSamp.num = for (num in datSamp.num){
str_remove(num, " ")}
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp = for (num in datSamp.num){
str_remove(num, " ")}
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp = for (num in datSamp){
str_remove(num, " ")}
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp = for (num in datSamp$Genotype){
str_remove(num, " ")}
datSamp$Genotype
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp$Genotype
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
for (num in datSamp$Genotype){
str_remove(num, " ")}
datSamp$Genotype
datSamp[5,2]
nchar(datSamp[5,2])
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
nchar(datSamp.num[5])
datSamp.num[5]
sapply(datSamp, str_remove(datSamp$Genotype, " "))
### Combining Genomes and Mo###
library(stringr)
library(tidyverse)
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
sapply(datSamp, str_remove(datSamp$Genotype, " "))
str_remove(datSamp$Genotype, " ")
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
head(datSamp.num)
head(datSamp$Genotype)
nchar(head(datSamp$Genotype))
nchar(head(datSamp[5,2]))
nchar(datSamp[5,2])
datSamp[5,2]
nchar(datSamp[5,2])
s = datSamp[5,2]
nchar(s)
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
str_remove(datSamp$Genotype, " ")
datSamp$Genotype
datSamp$Genotype = str_remove(datSamp$Genotype, " ")
datSamp
write.csv("datSamp.csv")
write.csv(datSamp, "datSamp.csv")
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
head(datSamp.num)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat %>% filter(str_detect(dat$Height..in.., "N") == FALSE)
dat = dat %>% filter(str_detect(dat$Genotype, "B") == FALSE)
dat$Genotype = str_remove(dat$Genotype, " ") #removes any empty space in Mo###
head(dat$Genotype)
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
#Add in SNP info from Marker data CSV, beginning with column six
snp = read.csv(file = "IBM94markerset08seq.csv", header = TRUE)
snp = snp[,-(1:5)]
### Assigning Genotypes to Mo###
### Austin's code ###
library(data.table)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
dat.num = substrRight(as.character(dat$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
snp.num = substrRight(as.character(colnames(snp)), 3)
unique(dat.num)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("Genotype")
MoNum = cbind(dat.num)
colnames(MoNum) = c("Genotype")
dat2 = merge(MoNum,snpMatch,by = "Genotype") ### issue: the dim of dat2 should = MoNum when it is merged with the Genotypes (1527-1437)
dim(dat2)
dim(MoNum)
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp$Genotype = str_remove(datSamp$Genotype, " ") #removes any empty space in Mo###
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
snp.num = substrRight(as.character(colnames(snp)), 3)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("Genotype")
MoNumSamp = cbind(datSamp.num)
colnames(MoNumSamp) = c("Genotype")
datSamp2 = merge(MoNumSamp,snpMatch,by = "Genotype") ### issue: the dim of dat2 should = MoNum when it is merged with the Genotypes (1527-1437)
datSamp2[,1:10]
library(stringr)
library(tidyverse)
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp$Genotype = str_remove(datSamp$Genotype, " ") #removes any empty space in Mo###
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
snp.num = substrRight(as.character(colnames(snp)), 3)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("Genotype")
MoNumSamp = cbind(datSamp.num)
colnames(MoNumSamp) = c("Genotype")
datSamp2 = merge(MoNumSamp,snpMatch,by = "Genotype") ### issue: the dim of dat2 should = MoNum when it is merged with the Genotypes (1527-1437)
datSamp2[,1:10]
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp$Genotype = str_remove(datSamp$Genotype, " ") #removes any empty space in Mo###
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
snp.num = substrRight(as.character(colnames(snp)), 3)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("Genotype")
MoNumSamp = cbind(datSamp.num)
colnames(MoNumSamp) = c("Genotype")
datSamp2 = merge(MoNumSamp,snpMatch,by = "Genotype") ### issue: the dim of dat2 should = MoNum when it is merged with the Genotypes (1527-1437)
datSamp2[,1:10]
### Combining Genomes and Mo###
library(stringr)
library(tidyverse)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
dat = dat %>% filter(str_detect(dat$Height..in.., "N") == FALSE)
dat = dat %>% filter(str_detect(dat$Genotype, "B") == FALSE)
dat$Genotype = str_remove(dat$Genotype, " ") #removes any empty space in Mo###
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
#Add in SNP info from Marker data CSV, beginning with column six
snp = read.csv(file = "IBM94markerset08seq.csv", header = TRUE)
snp = snp[,-(1:5)]
### Assigning Genotypes to Mo###
### Austin's code ###
library(data.table)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
dat.num = substrRight(as.character(dat$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
snp.num = substrRight(as.character(colnames(snp)), 3)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("Genotype")
MoNum = cbind(dat.num)
colnames(MoNum) = c("Genotype")
dat2 = merge(MoNum,snpMatch,by = "Genotype") ### issue: the dim of dat2 should = MoNum when it is merged with the Genotypes (1527-1437)
head(dat2[,1:10],20)
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp$Genotype = str_remove(datSamp$Genotype, " ") #removes any empty space in Mo###
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
snp.num = substrRight(as.character(colnames(snp)), 3)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# crea
colnames(snpMatch) = c("Genotype")
MoNumSamp = cbind(datSamp.num)
colnames(MoNumSamp) = c("Genotype")
datSamp2 = merge(MoNumSamp,snpMatch,by = "Genotype") ### issue: the dim of dat2 should = MoNum when it is merged with the Genotypes (1527-1437)
datSamp2[,1:10]
dim(MoNum)
dim(MoNumSamp)
dim(datSamp2)
dim(dat2)
unique(MoNum)
length(uniqe(MoNum))
length(unique(MoNum))
names(dat2)
dim(dat2)
head(dat2[1,])
head(dat2)
head(dat2[,1:10],20)
unique(dat2$Genotype)
length(unique(dat2$Genotype))
length(MoNum)
datG = c(unique(dat2$Genotype))
datG = c(unique(MoNum))
names(snpMatch)
snpMatch$Genotype
matchG =c(unique(snpMatch$Genotype))
G =cbind(datG, matchG)
unique(dat.num)
dim(dat2)
dim(dat.num)
dim(MoNum)
Student = c("Jessica", "Drew", "Michael","Julia", "Drew")
Major = c("MathStat", "Stat", "Math","Stat", "Stat")
StudentMajor= cbind(Student, Major)
colnames(StudentMajor) = c("Student", "Major")
Credits =c( 20, 30, 40, 50)
MajorC =c("MathStat", "Stat", "Math", "Eng")
MajorCredits = cbind(Credits, MajorC)
colnames(MajorCredits) =c("Credits", "Major")
StudentCredits = merge(StudentMajor, MajorCredits, by = "Major")
StudentCredits
head(dat2[,1:10],20)
dim(MoNum)
dim(dat2)
### end Austin's code ###
install.packages("pracma")
### end Austin's code ###
#install.packages("pracma")
library("pracma")
for (i in 1:1464){
if (!strcmp(MoNum[i], dat2[i])) {
print(i)
}
}
for (i in 1:100){
if (!strcmp(MoNum[i], dat2[i])) {
print(i)
}
}
head(dat2[,1:10],20)
head(MoNum, 20)
a = head(dat2[,1:10],20)
b = head(MoNum,20)
cbind(b,a)
#install.packages("pracma")
library("pracma")
for (i in 1:100){
if (!strcmp(MoNum[i], dat2[i,1])) {
print(i)
}
}
dat2$Genotype[2]
library("pracma")
for (i in 1:100){
if (!strcmp(MoNum[i], dat2$Genotype[i])) {
print(i)
}
}
both = cbind(dat2$Genotype, MoNum)
both = cbind(dat2$Genotype[30:40], MoNum[30:40])
both
dat2$Genotype
dat2$Genotype[:50]
dat2$Genotype[1:50]
dat2$Genotype[30:50]
dat2$Genotype[30:35]
both = cbind(dat2$Genotype[30:40], MoNum[30:40])
both
View(dat2)
write.csv(dat2, "dat2.csv")
for (i in 1:50){
if (!strcmp(MoNum[i], dat2$Genotype[i])) {
print(dat2$Genotype[i])
}
}
for (i in 1:50){
if (!strcmp(MoNum[i], dat2$Genotype[i])) {
print(i, dat2$Genotype[i])
}
}
for (i in 1:50){
if (!strcmp(MoNum[i], dat2$Genotype[i])) {
print(i)
print(dat2$Genotype[i])
}
}
for (i in 1:50){
if (!strcmp(MoNum[i], dat2$Genotype[i])) {
print(i)
print(dat2$Genotype[i])
print(MoNum[i])
}
}
Student = c("Jessica", "Drew", "Michael","Julia", "Drew")
Major = c("MathStat", "Stat", "Math","Stat", "Stat")
StudentMajor= cbind(Student, Major)
colnames(StudentMajor) = c("Student", "Major")
Credits =c( 20, 30, 40, 50)
MajorC =c("MathStat", "Stat", "Math", "Eng")
MajorCredits = cbind(Credits, MajorC)
colnames(MajorCredits) =c("Credits", "Major")
StudentCredits = merge(StudentMajor, MajorCredits, by = "Major")
StudentCredits
?which()
#####Scrubbing Manching Combined Stress Data#####
dat = read.csv(file = "C:/Users/twili/Desktop/GIThub/Thomas/Stapleton-Lab/Manching BayesNet/Manching2012PlantHT.csv")
unique(dat$Line)
#Standardizing the 11 unique treatment descriptions to the correct number 8
unique(dat$Treatment)
unique(dat$Treatment)[2] == unique(dat$Treatment)[3]
levels(dat$Treatment)[3] = levels(dat$Treatment)[2]
levels(dat$Treatment)[10] = levels(dat$Treatment)[9]
levels(dat$Treatment)[4] = levels(dat$Treatment)[8]
length(levels(dat$Treatment)) == 8
levels(dat$Treatment) = c("control","ln","lw,ln","lw,p",
"ln,p","lw,ln,p","lw","p")
levels(dat$Treatment)
#Setting up quantitative columns using treatment levels
treats = matrix(rep(0,length(dat$Treatment) * 3), ncol = 3)
treats = t(sapply(1:length(dat$Treatment), function(x){
if(as.character(dat$Treatment[x]) == "control"){
treats[x,] = c(0,0,0)
}else if(as.character(dat$Treatment[x]) == "ln"){
treats[x,] = c(0,1,0)
}else if(as.character(dat$Treatment[x]) == "lw,ln"){
treats[x,] = c(1,1,0)
}else if(as.character(dat$Treatment[x]) == "lw,p"){
treats[x,] = c(1,0,1)
}else if(as.character(dat$Treatment[x]) == "ln,p"){
treats[x,] = c(0,1,1)
}else if(as.character(dat$Treatment[x]) == "lw,ln,p"){
treats[x,] = c(1,1,1)
}else if(as.character(dat$Treatment[x]) == "lw"){
treats[x,] = c(1,0,0)
}else if(as.character(dat$Treatment[x]) == "p"){
treats[x,] = c(0,0,1)}
}))
treats = as.data.frame(treats)
colnames(treats) = c("Low Water", "Low Nitrogen", "Pathogen")
#Now combining the new treatment columns into the old data frame
dat1 = cbind(treats$`Low Water`, treats$`Low Nitrogen`, treats$Pathogen, dat$Line, dat$Height_in)
head(dat1)
dat1 = as.data.frame(dat1)
dat1[,4] = sapply(dat1[,4],function(x){
x = levels(dat$Line)[x]
})
head(dat1)
#give them column names
colnames(dat1) =c("Low Water", "Low Nitrogen", "Pathogen", "Line", "Height")
head(dat1)
#Write the csv
write.csv(dat1,file = "C:/Users/twili/Desktop/GIThub/Thomas/Stapleton-Lab/Manching BayesNet/ManchingScrubbed.csv",
row.names = FALSE)
#####Remove any Mo017 or B73, also Mo066#####
length(unique(dat1$Line))
bad = which(dat1$Line == "Mo066" |
dat1$Line == "B73" |
dat1$Line == "Mo17 parent" |
dat1$Line == "IBMMo17" |
dat1$Line == "IBMB73")
dat2 = dat1[-bad,]
length(unique(dat2$Line))
#then combine IMB lines with nonIBM lines of the same number
bad = which(substr(dat2$Line,1,3) == "IBM")
dat2 = dat2[-bad,]
length(unique(dat2$Line))
### Combining Genomes and Mo###
library(stringr)
library(tidyverse)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat %>% filter(str_detect(dat$Height..in.., "N") == FALSE)
dat = dat %>% filter(str_detect(dat$Genotype, "B") == FALSE)
dat$Genotype = str_remove(dat$Genotype, " ") #removes any empty space in Mo###
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
#Add in SNP info from Marker data CSV, beginning with column six
snp = read.csv(file = "IBM94markerset08seq.csv", header = TRUE)
snp = snp[,-(1:5)]
#testing the merging function
#does it move the same numbers together?
datSamp = dat[30:40,] #sample data only containing 007 and 010 (30:40,900:910)
datSamp$Genotype = str_remove(datSamp$Genotype, " ") #removes any empty space in Mo###
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
snp.num = substrRight(as.character(colnames(snp)), 3)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("Genotype")
MoNumSamp = cbind(datSamp.num)
colnames(MoNumSamp) = c("Genotype")
datSamp2 = merge(MoNumSamp,snpMatch,by = "Genotype") ### issue: the dim of dat2 should = MoNum when it is merged with the Genotypes (1527-1437)
S
MoNumSamp = cbind(datSamp.num)
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
### Austin's code ###
library(data.table)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
datSamp$Genotype = str_remove(datSamp$Genotype, " ") #removes any empty space in Mo###
datSamp.num = substrRight(as.character(datSamp$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
snp.num = substrRight(as.character(colnames(snp)), 3)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("Genotype")
MoNumSamp = cbind(datSamp.num)
colnames(MoNumSamp) = c("Genotype")
datSamp2 = merge(MoNumSamp,snpMatch,by = "Genotype") ### issue: the dim of dat2 should = MoNum when it is merged with the Genotypes (1527-1437)
datSamp2[,1:10]
dat.num = substrRight(as.character(dat$Genotype), 3) # Leaves out begining 0 for Mo010 and Mo039
snp.num = substrRight(as.character(colnames(snp)), 3)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
colnames(snpMatch) = c("Genotype")
MoNum = cbind(dat.num)
colnames(MoNum) = c("Genotype")
dat2 = merge(MoNum,snpMatch,by = "Genotype") ### issue: the dim of dat2 should = MoNum when it is merged with the Genotypes (1527-1437)
head(dat2[,1:10],20)
length(dat2)
dim(dat2)
dim(MoNum)
head(dat2,20)
dim(dat2)
dim(snp)
dim(snpMatch)
dim(MoNum)
head(MoNum)
head(snpMatch)
head(snpMatch[,1:10])
head(MoNum)
str(snpMatch[,1:10])
levels(MoNum[,1])
unique(MoNum)
unique(snpMatch[,1])
x = unique(MoNum)
y = unique(snpMatch[,1])
setdiff(x,y)
