x = c(2,6,16,24,28,29,69,40,33,100,99,69,45,4,8,69,69,15,12,1,21,5,4,8,115,04,5,2)
hist(x)
### Combining Genomes and Mo###
library(stringr)
library(tidyverse)
library(dplyr)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height_Update.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat %>% filter(str_detect(dat$Height..in.., "N") == FALSE)
dat = dat %>% filter(str_detect(dat$Genotype, "B") == FALSE)
dat$Genotype = str_remove(dat$Genotype, " ") #removes any empty space in Mo###
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
#Add in SNP info from Marker data CSV, beginning with column six
snpFull = read.csv(file = "IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
### Assigning Genotypes to Mo###
library(data.table)
#function takes the last three values of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num = substrRight(as.character(dat$Genotype), 3)
snp.num = substrRight(as.character(colnames(snp)), 3)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
snpMatch[1:10, 1:10]
head(dat.num)
tail(dat.num)
head(dat$Genotype)
tail(dat$Genotype)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("Genotype")
dim(dat.num)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("Genotype")
MoNum = cbind(dat.num)
colnames(MoNum) = c("Genotype")
MoNum
test = cbind(dat.num, dat$Genotype)
tail(test)
test = cbind(MoNum, dat$Genotype)
tail(test)
length(MoNum)
dat2 = merge(MoNum,snpMatch,by = "Genotype")
dat2[1499:, 1:10]
dat2[1499:1507, 1:10]
dat2[1499:1507, 1:20]
dat2[885:887, 1:20]
dat2 = merge(MoNum,snpMatch,by = "Genotype")
dat2[885:887, 1:20]
dim(dat2)
dim(dat)
#combine with the full data description
dat2 = cbind(dat, dat2)
dat2[885:887, 1:20]
colnames(snpMatch) = c("GenotypeNum")
MoNum = cbind(dat.num)
colnames(MoNum) = c("GenotypeNum")
dat2 = merge(MoNum,snpMatch,by = "GenotypeNum")
dat2[,1:10]
head(dat1[,-1])
head(dat2[,-1])
dat2[,-1]
dat2[,1:10]
#combine with the full data description
dat2 = cbind(dat, dat2)
dat2
dat2[883:888, 1:10]
dat2[883:888, 1:10]
dat2 = merge(MoNum,snpMatch,by = "GenotypeNum")
#dat2 = dat2[,-1]
check = cbind(dat$Genotype, dat2$GenotypeNum)
check
#dat2 = dat2[,-1]
check = cbind(dat$Genotype, dat2$GenotypeNum, MoNum)
head(check)
head(check, 20)
dat2$GenotypeNum
tail(dat2$GenotypeNum)
dat2 = merge(MoNum,snpMatch,by = "GenotypeNum") ## Merge brings issues to the GenotypeNum, consecutive inc num
tail(dat2$GenotypeNum)
tail(dat$Genotype)
tail(check)
tail(MoNum)
#dat2 = dat2[,-1]
check = cbind(dat$Genotype, dat2$GenotypeNum, MoNum)
check
head(dat$Genotype)
head(dat$Genotype,20)
head(dat2$GenotypeNum, 20)
head(MoNum)
head(MoNum,20)
#dat2 = dat2[,-1]
check = rbind(dat$Genotype, dat2$GenotypeNum, MoNum)
#dat2 = dat2[,-1]
check = cbind(dat$Genotype, dat2$GenotypeNum, MoNum)
head(check,20)
head(MoNum,10)
head(MoNum,10)20
head(MoNum,20)
#dat2 = dat2[,-1]
check = cbind(head(dat$Genotype,20), head(dat2$GenotypeNum,20), head(MoNum,20)
)
check
#dat2 = dat2[,-1]
check = cbind(head(dat$Genotype,20),head(MoNum,20))
check
head(dat2$GenotypeNum,20)
#dat2 = dat2[,-1]
check = cbind(head(dat$Genotype,20),head(MoNum,20), head(dat2$GenotypeNum))
#dat2 = dat2[,-1]
check = cbind(head(dat$Genotype,20),head(MoNum,20), head(dat2$GenotypeNum,20))
check
dat2[,1:10]
dat2[885:888, 1:10]
dat2$GenotypeNum
all.equal(MoNum, dat2$GenotypeNum)
#dat2 = dat2[,-1]
check = cbind(head(MoNum,20), head(dat2$GenotypeNum,20))
check
dat2 = merge(MoNum,snpMatch,by = "GenotypeNum") ## Merge brings issues to the GenotypeNum, consecutive inc num
dat2$GenotypeNum
tail(dat2$GenotypeNum)
class(dat2$GenotypeNum)
#dat2 = dat2[,-1]
check = cbind(head(MoNum,20), head(as.int(dat2$GenotypeNum,20)))
as.integer("1")
#dat2 = dat2[,-1]
check = cbind(head(MoNum,20), head(as.integer(dat2$GenotypeNum,20)))
as.integer(dat2$GenotypeNum)
#creating datasets exclusively containing the last three numbers
dat.num = substrRight(as.integer(dat$Genotype), 3)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=TRUE)
snpMatch = rbind(snp.num,snp.new)
warnings()
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
snpMatch[1:10, 1:10]
head(snp.new)
snpMatch = rbind(as.integer(snp.num),snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("GenotypeNum")
MoNum = cbind(as.integer(dat.num))
colnames(MoNum) = c("GenotypeNum")
dat2 = merge(MoNum,snpMatch,by = "GenotypeNum") ## Merge brings issues to the GenotypeNum, consecutive inc num
MoNum
head(snp.num)
head(MoNum)
#creating datasets exclusively containing the last three numbers
dat.num = as.integer(substrRight(as.character(dat$Genotype), 3))
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
head(dat.num)
head(dat.num,20)
head(snp.num, 20)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
.Primitive("as.character")
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("GenotypeNum")
MoNum = cbind(dat.num)
colnames(MoNum) = c("GenotypeNum")
dat2 = merge(MoNum,snpMatch,by = "GenotypeNum") ## Merge brings issues to the GenotypeNum, consecutive inc num
dat2[,1:10]
#dat2 = dat2[,-1]
check = cbind(head(MoNum,20), head(dat2$GenotypeNum,20))
check
#combine with the full data description
dat2 = cbind(dat, dat2)
dat2[885:890, 1:10]
dat2$GenotypeNum
head(cbind(dat2$Genotype,dat2$GenotypeNum)), 20)
head(cbind(dat2$Genotype,dat2$GenotypeNum), 20)
dat2[1:20, 1:10]
dat2[21:30], 1:10]
dat2[21:30, 1:10]
dat2[31:50, 1:10]
dat2 = merge(MoNum,snpMatch,by = "GenotypeNum") ## Merge brings issues to the GenotypeNum, consecutive inc num
dat2[31:50, 1:10]
test = cbind(MoNum, dat2)
test[31:50,1:10]
dat2[31:50,1:2]
dat2[31:50,1:10]
test[31:50,1:2]
#combine with the full data description
dat2 = cbind(dat, dat2)
dat2[31:50, 1:10] ### labeling issues here between original Genotype and  obs 35-43
dat2 = merge(MoNum,snpMatch,by = "GenotypeNum", all.MoNum = TRUE) ## Merge brings issues to the GenotypeNum, consecutive inc num
dat2[31:50,1:10]
test = cbind(MoNum, dat2)
test[31:50,1:2]
dat2 = merge(MoNum,snpMatch,all.MoNum = TRUE) ## Merge brings issues to the GenotypeNum, consecutive inc num
dat2[31:50,1:10]
test = cbind(MoNum, dat2)
test[31:50,1:2]
dat2 = merge(MoNum,snpMatch,all.x = TRUE) ## Merge brings issues to the GenotypeNum, consecutive inc num
dat2[31:50,1:10]
test = cbind(MoNum, dat2)
dat2 = merge(MoNum,snpMatch,all.MoNum = all) ## Merge brings issues to the GenotypeNum, consecutive inc num
dat2[31:50,1:10]
test = cbind(MoNum, dat2)
test[31:50,1:2]
dat2 = merge(MoNum,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all) ## Merge brings issues to the GenotypeNum, consecutive inc num
dat2[31:50,1:10]
test = cbind(MoNum, dat2)
test[31:50,1:2]
dat2[920:950,1:10]
dat2[900:950,1:10]
dat2[1499:1507,1:10]
dat2[1450:1500,1:10]
dat2[1499:1507,1:10]
dat2[1300:1400,1:10]
unique(dat2$GenotypeNum[1:100])
unique(dat2$GenotypeNum[200:300])
unique(dat2$GenotypeNum[300:500])
unique(dat2$GenotypeNum[500:700])
unique(dat2$GenotypeNum[700:800])
unique(dat2$GenotypeNum[800:900])
unique(dat2$GenotypeNum[900:1000])
unique(dat2$GenotypeNum[1000:1200])
unique(dat2$GenotypeNum[1200:1300])
unique(dat2$GenotypeNum[1300:1400])
unique(dat2$GenotypeNum[1400:1507])
unique(dat2$GenotypeNum[700:800]) #large gap b/t GenotypeNum, merge is ordering the mo###???
unique(MoNum)
uniuqe(MoNum[41:47])
unique(MoNum[41:47])
unique(MoNum)[41:47]
unique(dat2$GenotypeNum[700:800]) #large gap b/t GenotypeNum, merge is ordering the mo###???
count(MoNum == 7)
studentNum =c("1", "2", "3", "4")
studentName = c("Julia", "Jessica", "Drew", "Michael")
SNum = c("2", "3", "3", "4", "1")
grades =c(96,75,80,88,90)
StudentInfo =cbind(studentNum, studentName)
colnames(StudentInfo) = c("StudentNum", "Name")
grades =cbind(sNum, grades)
colnames(grades) =c("StudentNum", "grade")
grades =cbind(SNum, grades)
colnames(grades) =c("StudentNum", "grade")
