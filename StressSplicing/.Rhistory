### Graphs for height corn data ###
library("ggplot2")
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "dat2.csv", header = TRUE)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "dat2.csv", header = TRUE)
dat = dat[,c(3,4,7)]
dat$Height..in.. = as.factor(dat$Height..in..)
### violin plot based on height and Mo###
p <- ggplot(dat, aes(x=BreedType, y=Height..in..)) +
geom_violin()
p
### violin plot based on height and Mo###
p <- ggplot(dat, aes(x=BreedType, y=Height..in..))
p
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "dat2.csv", header = TRUE)
dat = dat[,c(3,4,7)]
inbred = dat[1:896,]
outbred = dat[-(1:896),]
hist(inbred$Height..in..)
hist(inbred), col=rgb(1,0,0,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”, xlab=”Variable”)
hist(outbred, col=rgb(0,0,1,0.5), add=T)
hist(inbred), col=rgb(1,0,0,0.5), main=”Overlapping Histogram”, xlab=”Variable”)
hist(inbred, col=rgb(1,0,0,0.5), main=”Overlapping Histogram”, xlab=”Variable”)
hist(inbred, col=rgb(1,0,0,0.5), main="Overlapping Histogram", xlab="Variable")
hist(inbred$Height..in.., col=rgb(1,0,0,0.5), main="Overlapping Histogram", xlab="Variable")
hist(outbred$Height..in.., col=rgb(0,0,1,0.5), add=T)
box()
hist(inbred$Height..in.., col=rgb(1,0,0,0.5),
main="Overlapping Histogram of inbred and outbred", xlab="Variable")
hist(outbred$Height..in.., col=rgb(0,0,1,0.5), add=T)
box()
hist(inbred$Height..in.., col="pink",
main="Overlapping Histogram of Inbred and Outbred Heights", xlab="Variable")
hist(outbred$Height..in.., col="blue", add=T)
hist(inbred$Height..in.., col=rgb(1,0,0,0.5),
main="Overlapping Histogram of Inbred and Outbred Heights", xlab="Variable")
hist(outbred$Height..in.., col=rgb(0,0,1,0.5), add=T)
box()
legend("topleft",
c("Inbred", "Outbred"),
lty=c(1, 2, 1),
col=c(rgb(1,0,0,0.5),rgb(0,0,1,0.5)),
bty = "n")
legend("topleft",
c("Inbred", "Outbred"),
#lty=c(1, 2, 1),
col=c(rgb(1,0,0,0.5),rgb(0,0,1,0.5)),
bty = "n")
hist(inbred$Height..in.., col=rgb(1,0,0,0.5),
main="Overlapping Histogram of Inbred and Outbred Heights", xlab="Variable")
hist(outbred$Height..in.., col=rgb(0,0,1,0.5), add=T)
box()
legend("topleft",
c("Inbred", "Outbred"),
#lty=c(1, 2, 1),
col=c(rgb(1,0,0,0.5),rgb(0,0,1,0.5)),
bty = "n")
hist(inbred$Height..in.., col=rgb(1,0,0,0.5),
main="Overlapping Histogram of Inbred and Outbred Heights", xlab="Variable")
hist(outbred$Height..in.., col=rgb(0,0,1,0.5), add=T)
box()
legend("topleft",
c("Inbred", "Outbred"),
lty=c(1, 2, 1),
col=c(rgb(1,0,0,0.5),rgb(0,0,1,0.5)),
bty = "n")
hist(inbred$Height..in.., col=rgb(1,0,0,0.5),
main="Overlapping Histogram of Inbred and Outbred Heights", xlab="Variable")
hist(outbred$Height..in.., col=rgb(0,0,1,0.5), add=T)
box()
legend("topleft",
c("Inbred", "Outbred"),
lty=c(1, 2, 1),
fill =c(rgb(1,0,0,0.5),rgb(0,0,1,0.5)),
bty = "n")
hist(inbred$Height..in.., col=rgb(1,0,0,0.5),
main="Overlapping Histogram of Inbred and Outbred Heights", xlab="Variable")
hist(outbred$Height..in.., col=rgb(0,0,1,0.5), add=T)
box()
legend("topleft",
c("Inbred", "Outbred"),
fill =c(rgb(1,0,0,0.5),rgb(0,0,1,0.5)),
bty = "n")
hist(inbred$Height..in.., col=rgb(1,0,0,0.5),
main="Overlapping Histogram of Inbred and Outbred Heights", xlab="Height")
hist(outbred$Height..in.., col=rgb(0,0,1,0.5), add=T)
box()
legend("topleft",
c("Inbred", "Outbred"),
fill =c(rgb(1,0,0,0.5),rgb(0,0,1,0.5)),
bty = "n")
library(stringr)
library(tidyverse)
library(dplyr)
#setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "Plant_Height_Update.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat %>% filter(str_detect(dat$Height..in.., "N") == FALSE)
dat = dat %>% filter(str_detect(dat$Genotype, "B") == FALSE)
dat$Genotype = str_remove(dat$Genotype, " ") #removes any empty space in Mo###
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
#Add in SNP info from Marker data CSV, beginning with column six
snpFull = read.csv(file = "IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
names(snpFull)
head(names(snpFull))
head(snp[,1:5])
head(snpFull[,1:5])
snpNames = t(snpFull[,1:5])
head(snpNames)
snpNames[1:10,]
snpNames
dim(snpNames)
snpNames(, 1:10)
snpNames[], 1:10]
snpNames[, 1:10]
snpNames = t(cbind(snpFull$markername, snpFull$Primary_Bin, snpFull$incre_new))
dim(snpNames)
snpNames[, 1:10]
names(snpNames)
snpNames =cbind(snpFull$markername, snpFull$Primary_Bin, snpFull$incre_new)
names(snpNames)
names(snpFull)
head(snpNames)
head(snpFull$markername)
View(snpNames)
class(snpFull$markername)
snpNames =cbind(snpFull$markername, snpFull$Primary_Bin, snpFull$incre_new)
head(snpNames)
class(snpNames[,1])
snpNames =cbind.data.frame(snpFull$markername, snpFull$Primary_Bin, snpFull$incre_new)
head(snpNames)
snpNames =t(cbind.data.frame(snpFull$markername, snpFull$Primary_Bin, snpFull$incre_new))
head(snpNames)
dim(snpNames)
snpNames[,1:10]
Merge(snpNames, dat2, by=NULL, quiet=getOption("quiet"), ...)
merge(snpNames, dat2, by=NULL, quiet=getOption("quiet"), ...)
merge(snpNames, dat2, by=NULL)
snpFull = read.csv(file = "IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
### Assigning Genotypes to Mo###
library(data.table)
#function takes the last three values of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num = substrRight(as.character(dat$Genotype), 3)
snp.num = substrRight(as.character(colnames(snp)), 3)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("Genotype")
MoNum = cbind(dat.num)
colnames(MoNum) = c("Genotype")
dat2 = merge(MoNum,snpMatch,by = "Genotype")
dat2[,1:10]
dat2 = dat2[,-1]
#combine with the full data description
dat2 = cbind(dat, dat2)
merge(snpNames, dat2, by=NULL)
newDat = merge(snpNames, dat2, by=NULL)
head(newDat)
View(newDat)
dim(new)
dim(snpNames)
dim(dat2)
dat2[,1]
dat2 = dat2[,-1]
dat2[,1]
dat = read.csv(file = "Plant_Height_Update.csv", header = TRUE)
#Take out unneeded IBMB###, NA, B73 loci
dat = dat %>% filter(str_detect(dat$Height..in.., "N") == FALSE)
dat = dat %>% filter(str_detect(dat$Genotype, "B") == FALSE)
dat$Genotype = str_remove(dat$Genotype, " ") #removes any empty space in Mo###
#Create Categorical Variables for PH207*Mo### and Mo### by gene breed
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Outbred")
dat = cbind(dat, BreedType)
#Add in SNP info from Marker data CSV, beginning with column six
snpFull = read.csv(file = "IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
### Assigning Genotypes to Mo###
library(data.table)
#function takes the last three values of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num = substrRight(as.character(dat$Genotype), 3)
snp.num = substrRight(as.character(colnames(snp)), 3)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("Genotype")
MoNum = cbind(dat.num)
colnames(MoNum) = c("Genotype")
dat2 = merge(MoNum,snpMatch,by = "Genotype")
dat2[,1:10]
dat2 = dat2[,-1]
#combine with the full data description
dat2 = cbind(dat, dat2)
dat2[1:10, 1:10]
head(dat2[,1])
space = c(rep('', 6))
space
space = matrix(rep('', 18), nrow = 3)
space
cbind.data.frame(space, snpNames)
snpNamesSpace = cbind.data.frame(space, snpNames)
