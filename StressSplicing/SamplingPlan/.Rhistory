x = c(2,6,16,24,28,29,69,40,33,100,99,69,45,4,8,69,69,15,12,1,21,5,4,8,115,04,5,2)
hist(x)
student =c("Jessica", "Julia", "Drew", "Michael")
grades =c(75,80,85,90,95,100)
sNum =c("1", "2", "3", "4")
SGNumb =c("1", "4", "2", "3", "4")
studentInfo = cbind(student, sNum)
colnames(studentInfo) =c("StudentName", "StudentNumber")
studentGrade = cbind(SGNumb, grades)
colnames(studentGrade) =c("StudentNumber", "Grade")
grades =c(75,80,85,90,95)
studentGrade = cbind(SGNumb, grades)
colnames(studentGrade) =c("StudentNumber", "Grade")
merge(studentInfo, studentGrade, by = "StudentNumber")
### Combining Genomes and Mo###
library(stringr)
library(tidyverse)
library(dplyr)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = dat %>% filter(str_detect(dat$Genotype, "Mo") == TRUE)
dat = read.csv(file = "SamplingPlan.csv", header = TRUE)
dat = dat %>% filter(str_detect(dat$Genotype, "Mo") == TRUE)
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Hybrid")
dat = cbind(BreedType, dat)
snpFull = read.csv(file = "IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
library(data.table)
#function takes the last three values of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
head(dat.num)
dat$Genotype
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
as.integer(substrRight(as.character(dat$Genotype), 3)
)
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("GenotypeNum")
datnames =names(dat.num)[-7]
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("GenotypeNum")
names(dat.num)
datnames =names(dat.num)[c(1,5,7,8)]
colnames(dat.num) = c(datnames,"GenotypeNum")
dat2 = merge(dat.num[,c(1,5,7,8)],snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
datnames =names(dat.num)[c(1,5,7,8)]
colnames(dat.num) = c(datnames,"GenotypeNum")
dat2 = merge(dat.num[,c(1,5,7,8)],snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat.num[,c(1,5,7,8)]
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
colnames(snpMatch) = c("GenotypeNum")
datnames =names(dat.num)[c(1,5,7,8)]
datnames
colnames(dat.num) = c(datnames,"GenotypeNum")
dat.num$GenotypeNum
names(dat.num)
# creating matching Genotype columns to merge the data
need = c(1,5,7,8) #column numbers of needed variables
dat.num = dat.num[,need]
head(dat.num)
as.integer(substrRight(as.character(dat$Genotype), 3)
)
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
names(dat.num)
# creating matching Genotype columns to merge the data
need = c(1,5,7,8,15) #column numbers of needed variables
dat.num = dat.num[,need]
colnames(snpMatch) = c("GenotypeNum")
datnames =names(dat.num)
colnames(dat.num) = c(datnames,"GenotypeNum")
length(names(dat.num))
length(c(datnames,"GenotypeNum"))
c(datnames,"GenotypeNum")
names(dat.num)
colnames(dat.num) = c(datnames[-5],"GenotypeNum")
dat2 = merge(dat.num[,need],snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1]
head(dat2)
dat2[1:10, 1:10]
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2[1:20, 1:20]
dat2 = dat2[,-1]
dat2[1:20, 1:20]
write.csv(dat2, "SamplingPlan_dat2.csv")
dim(dat2)
dim(dat2)[2]
colnames(dat2) = rep("",dim(dat2)[2])
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
other = as.data.frame(matrix(rep(0,12), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
#####Adding marker location and chromosome#####
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
other = as.data.frame(matrix(rep(0,12), nrow = 2))
aux = cbind(other,aux)
dim(aux)
dim(dat2)
2*length(datnames)
other = as.data.frame(matrix(rep(0,2*length(datnames)), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
dim(aux)
dim(dat2)
other = as.data.frame(matrix(rep(0,5, nrow = 2))
other = as.data.frame(matrix(rep(0,5), nrow = 2))
other = as.data.frame(matrix(rep(0,6), nrow = 2))
other = as.data.frame(matrix(rep(0,10), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
dim(dat2)
dim(aux)
dat2[1:10, 1:10]
other = as.data.frame(matrix(rep(0,8), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
other = as.data.frame(matrix(rep(0,10), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
dim(aux)
dim(dat2)
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
other = as.data.frame(matrix(rep(0,10), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
dim(aux)
dim(dat2)
#####Adding marker location and chromosome#####
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
other = as.data.frame(matrix(rep(0,8), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
names(dat2)
dat2[1:10, 1:10]
colnames(dat3) = c("BreedType", "Genotype", "Derivation", "Barcode", as.character(snpFull$markername))
dat3[1:10,1:10]
write.csv(dat3, file = "snpHeight.csv" ,
row.names = FALSE)
write.csv(dat3, file = "snpSamplingPlan.csv" ,
row.names = FALSE)
library(stringr)
library(tidyverse)
library(dplyr)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing")
dat = read.csv(file = "SamplingPlan.csv", header = TRUE)
dat = dat %>% filter(str_detect(dat$Genotype, "Mo") == TRUE)
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Hybrid")
dat = cbind(BreedType, dat)
snpFull = read.csv(file = "IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
library(data.table)
#function takes the last three values of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
need = c(1,5,7,8,15) #column numbers of needed variables
dat.num = dat.num[,need]
colnames(snpMatch) = c("GenotypeNum")
datnames =names(dat.num)
colnames(dat.num) = c(datnames[-5],"GenotypeNum")
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1]
dat2[1:20, 1:20]
write.csv(dat2, "SamplingPlan_dat2.csv")
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
other = as.data.frame(matrix(rep(0,8), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
colnames(dat3) = c("BreedType", "Genotype", "Derivation", "Barcode", as.character(snpFull$markername))
dat3[1:10,1:10]
write.csv(dat3, file = "snpSamplingPlan.csv" ,
row.names = FALSE)
#####MAKE SURE TO DELETE THE EXTRA ZEROS IN [1:2,1:4] IN EXCEL AFTERWARDS#####
dat = read.csv(file = "SamplingPlan.csv", header = TRUE)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing/SamplingPlan")
dat = read.csv(file = "SamplingPlan.csv", header = TRUE)
snpFull = read.csv(file = "../IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
library(data.table)
#function takes the last three values of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
need = c(1,5,7,8,15) #column numbers of needed variables
dat.num = dat.num[,need]
colnames(snpMatch) = c("GenotypeNum")
datnames =names(dat.num)
colnames(dat.num) = c(datnames[-5],"GenotypeNum")
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1]
dat2[1:20, 1:20]
write.csv(dat2, "SamplingPlan_dat2.csv")
# creating matching Genotype columns to merge the data
need = c(1,5,7,8,15) #column numbers of needed variables
dat.num = dat.num[,need]
dim(dat.num)
names(dat.num)
# creating matching Genotype columns to merge the data
need = c(1,5,7,8,14) #column numbers of needed variables
dat.num = dat.num[,need]
colnames(snpMatch) = c("GenotypeNum")
datnames =names(dat.num)
colnames(dat.num) = c(datnames[-5],"GenotypeNum")
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1]
dat2[1:20, 1:20]
write.csv(dat2, "SamplingPlan_dat2.csv")
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
other = as.data.frame(matrix(rep(0,8), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
colnames(dat3) = c("BreedType", "Genotype", "Derivation", "Barcode", as.character(snpFull$markername))
dat3[1:10,1:10]
write.csv(dat3, file = "snpSamplingPlan.csv" ,
row.names = FALSE)
library(stringr)
library(tidyverse)
library(dplyr)
setwd("C:/Users/twili/Desktop/GIThub/StapletonLab/StressSplicing/SamplingPlan")
dat = read.csv(file = "SamplingPlan.csv", header = TRUE)
dat = dat %>% filter(str_detect(dat$Genotype, "Mo") == TRUE)
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Hybrid")
dat = cbind(BreedType, dat)
snpFull = read.csv(file = "../IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
#############################################
### matching the Mo### to their snp Values ##
#############################################
library(data.table)
#function takes the last n characters of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
View(dat.num)
# creating matching Genotype columns to merge the data
need = c(1,5,7,8,9,10,15) #column numbers of needed variables
dat.num = dat.num[,need]
colnames(snpMatch) = c("GenotypeNum")
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
#
colnames(snpMatch) = c("GenotypeNum")
datnames =names(dat.num)
colnames(dat.num) = c(datnames[-5],"GenotypeNum")
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1]
dat2[1:20, 1:20]
write.csv(dat2, "SamplingPlan_dat2.csv")
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
other = as.data.frame(matrix(rep(0,8), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
colnames(dat3) = c("BreedType", "Genotype", "Derivation", "Barcode", as.character(snpFull$markername))
dat3[1:10,1:10]
write.csv(dat3, file = "snpSamplingPlan.csv" ,
row.names = FALSE)
#####MAKE SURE TO DELETE THE EXTR
dim(dat2)
dim(aux)
other = as.data.frame(matrix(rep(0,7), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
dim(aux)
dim(dat2)
head(dat2)
View(dat2)
#####Adding marker location and chromosome#####
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
other = as.data.frame(matrix(rep(0,6), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
dim(aux)
dim(dat2)
other = as.data.frame(matrix(rep(0,12), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
dim(dat2)
dim(aux)
other
head(dat2)
dat2[1, 1:10]
other = as.data.frame(matrix(rep(0,10), nrow = 2))
aux = cbind(other,aux)
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
dim(dat2)
dim(aux)
other
aux[1,1:10]
#####Adding marker location and chromosome#####
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
aux[1,1:10]
other = as.data.frame(matrix(rep(0,10), nrow = 2))
other
aux = cbind(other,aux)
aux[1:2, 1:10]
dat2[1, 1:10]
aux = cbind(other,aux)
other = as.data.frame(matrix(rep(0,12), nrow = 2))
aux = cbind(other,aux)
aux[1:2, 1:10]
#####Adding marker location and chromosome#####
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
other = as.data.frame(matrix(rep(0,12), nrow = 2))
aux = cbind(other,aux)
aux[1:2, 1:10]
dat2[1, 1:10]
#aux[1:2, 1:10]
#dat2[1, 1:10]
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
colnames(dat3) = c("BreedType", "Genotype", "Derivation", "Barcode", as.character(snpFull$markername))
dat3[1:10,1:10]
write.csv(dat3, file = "snpSamplingPlan.csv" ,
row.names = FALSE)
dim(dat2)
length(dat.num)-1
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(aux,snpFull$Chromosome)
other = as.data.frame(matrix(rep(0,2*(length(dat.num)-1)), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
#aux[1:2, 1:10]
#dat2[1, 1:10]
colnames(aux) = rep("",dim(dat2)[2])
colnames(dat2) = rep("",dim(dat2)[2])
dat3 = rbind(aux,dat2)
colnames(dat3) = c("BreedType", "Genotype", "Derivation", "Barcode", as.character(snpFull$markername))
dat3[1:10,1:10]
write.csv(dat3, file = "snpSamplingPlan.csv" ,
row.names = FALSE)
View(dat.num)
colnames(dat3) = c("BreedType", "Genotype", "Derivation", "Barcode", "Date", "RNA later", as.character(snpFull$markername))
dat3[1:10,1:10]
write.csv(dat3, file = "snpSamplingPlan.csv" ,
row.names = FALSE)
write.csv(dat3, file = "snpSamplingPlan.csv" ,
row.names = FALSE)
